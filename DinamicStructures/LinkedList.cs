namespace Algorithms.DinamicStructures
{
    /// <summary>
    /// Класс, реализующий связный список. 
    /// </summary>
    /// <typeparam name="T">Тип данных элементов связного списка.</typeparam>
    public class LinkedList<T>
    {
        /// <summary>
        /// Первый элемент связного списка.
        /// </summary>
        public Node<T>? Head;
        /// <summary>
        /// Последний элемент связного списка.
        /// </summary>
        public Node<T>? Tail;

        /// <summary>
        /// Метод, реализующий добавление нового элемент в начало списка.
        /// </summary>
        /// <param name="value">Добавляемый элемент.</param>
        public void AddHead(T value)
        {
            // Устанавливаем элемент с указанным значением в качестве нового элемента.
            Node<T> newNode = new(value);
            // Проверяем, есть ли хотя бы один элемент.
            if (Head != null)
            {
                // Если элемент есть:
                // Меняем ссылку на предыдущий элемент у первого элемента на новый элемент.
                Head.Previous = newNode;
                // Меняем ссылку на следующий элемент у нового элемента на первый элемент.
                newNode.Next = Head;
            }
            else
                // Если элементов нет, то устанавливаем новый элемент в качестве последнего.
                Tail = newNode;

            // Устанавливаем новый элемент в качестве первого.
            Head = newNode;
        }

        /// <summary>
        /// Метод, реализующий добавление нового элемент в конец списка.
        /// </summary>
        /// <param name="value">Добавляемый элемент.</param>
        public void AddTail(T value)
        {
            // Устанавливаем элемент с указанным значением в качестве нового элемента.
            Node<T> newNode = new(value);
            // Проверяем, есть ли хотя бы один элемент.
            if (Tail != null)
            {
                // Если элемент есть:
                // Меняем ссылку на следующий элемент у последнего элемента на новый элемент.
                Tail.Next = newNode;
                // Меняем ссылку на предыдущий элемент у нового элемента на последний элемент.
                newNode.Previous = Tail;
            }
            else
                // Если элементов нет, то устанавливаем новый элемент в качестве первого.
                Head = newNode;

            // Устанавливаем новый элемент в качестве последнего.
            Tail = newNode;
        }

        /// <summary>
        /// Метод, реализующий удаление первого элемента списка.
        /// </summary>
        public void RemoveHead()
        {
            // Если элементов в списке нет, то выходим из метода.
            if (Head == null) return;
            // Проверяем, есть ли в списке больше одного элемента.
            if (Head != Tail)
            {
                // Если элементов больше одного:
                // Устанавливаем следующий за первым элемент в качестве первого.
                Head = Head.Next;
                // Удаляем ссылку на следующий элемент у бывшего первого элемента.
                Head.Previous.Next = null;
                // Удаляем ссылку на бывший первый элемент у нового первого.
                Head.Previous = null;
            }
            else
            {
                // Если элемент один:
                // Обнуляем первый элемент.
                Head = null;
                // Обнуляем последний элемент.
                Tail = null;
            }
        }

        /// <summary>
        /// Метод, реализующий удаление последнего элемента списка.
        /// </summary>
        public void RemoveTail()
        {
            // Если элементов в списке нет, то выходим из метода.
            if (Tail == null) return;
            // Проверяем, есть ли в списке больше одного элемента.
            if (Head != Tail)
            {
                // Если элементов больше одного:
                // Устанавливаем предпоследний элемент в качестве последнего.
                Tail = Tail.Previous;               
                // Удаляем ссылку на предыдущий элемент у бывшего последнего элемента.
                Tail.Next.Previous = null;
                // Удаляем ссылку на бывший последнй элемент у нового последнего.
                Tail.Next = null;
            }
            else
            {
                // Если элемент один:
                // Обнуляем первый элемент.
                Head = null;
                // Обнуляем последний элемент.
                Tail = null;
            }
        }
    }
}
