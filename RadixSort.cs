namespace Algorithms
{
    /// <summary>
    /// Класс, реализующий поразрядную сортировку.
    /// </summary>
    public static class RadixSort
    {
        /// <summary>
        /// Метод, реализующий поразрядную сортировку.
        /// </summary>
        /// <param name="array">Массив для сортировки.</param>
        public static void Sort(int[] array)
        {
            // Устанавливаем значение максимального элемента массива.
            int arrayMax = GetMax(array);

            // Пробегаемся от единицы до числа разрядов в значении максимального элемента массива.
            for (int currentRadix = 1; arrayMax / currentRadix > 0; currentRadix *= 10)
                // Сортируем массив по текущему разряду.
                CountSort(array, currentRadix);
        }

        /// <summary>
        /// Метод, реализующий получение значения максимального элемента массива.
        /// </summary>
        /// <param name="array">Массив для поиска элементов.</param>
        /// <returns>Значение максимального элемента массива.</returns>
        static int GetMax(int[] array)
        {
            // Устанавливаем первый элемент массива в качестве значения максимального элемента массива.
            int max = array[0];
            // Пробегаемся по массиву n - 1 раз, где n - длина массива.
            for (int i = 1; i < array.Length; i++)
                // Сравниваем текущий элемент массива и текущее значение максимального элемента массива.
                if (array[i] > max)
                    // Если текущий элемент больше текущего значения максимального элемента массива, то меняем на него значение максимального элемента массива.
                    max = array[i];
            // Возвращаем значение максимального элемента массива.
            return max;
        }

        /// <summary>
        /// Метод, реализующий сортировку массива по заданному разряду.
        /// </summary>
        /// <param name="array">Массив для сортировки.</param>
        /// <param name="currentRadix">Заданный разряд.</param>
        static void CountSort(int[] array, int currentRadix)
        {
            // Устанавливаем десять в качестве количества существующих цифр.
            const int numsCount = 10;
            // Устанавливаем массив со значениями по умолчанию в качестве будущего отсортированного массива.
            int[] output = new int[array.Length];
            // Устанавливаем массив со значениями по умолчанию в качестве счётчиков встречаемых цифер в заданном разряде.
            int[] count = new int[numsCount]; 

            // Пробегаемся по массиву n раз, где n - длина массива.
            for (int i = 0; i < array.Length; i++)
                // Инкрементируем счётчик соответствующей цифры.
                count[array[i] / currentRadix % 10]++;

            // Пробегаемся по массиву n - 1 раз, где n - длина массива.
            for (int i = 1; i < count.Length; i++)
                // Прибавляем к каждому счётчику количество ячеек, занятых меньшими цифрами. 
                count[i] += count[i - 1];

            // Пробегаемся с конца по массиву n - 1 раз, где n - размер массива.
            for (int i = array.Length - 1; i >= 0; i--)
            {
                // Записываем число в соответствующее место в будущий отсортированный массив.
                output[count[array[i] / currentRadix % 10] - 1] = array[i];
                // Декрементируем счётчик.
                count[array[i] / currentRadix % 10]--;
            }

            // Пробегаемся по массиву n раз, где n - длина массива.
            for (int i = 0; i < array.Length; i++)
                // Записываем в массив для сортировки значения из отсортированного массива.
                array[i] = output[i];
        }
    }
}
